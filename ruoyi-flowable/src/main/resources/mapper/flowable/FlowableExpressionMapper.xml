<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.flowable.mapper.FlowableExpressionMapper">

    <resultMap type="FlowableExpression" id="FlowableExpressionResult">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="expression" column="expression"/>
        <result property="dataType" column="data_type"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="createId" column="create_id"/>
        <result property="updateId" column="update_id"/>
        <result property="status" column="status"/>
        <result property="remark" column="remark"/>
    </resultMap>

    <sql id="selectFlowableExpressionVo">
        select id,
               name,
               expression,
               data_type,
               create_time,
               update_time,
               create_id,
               update_id,
               status,
               remark
        from t_flowable_expression
    </sql>

    <select id="selectFlowableExpressionList" parameterType="FlowableExpression" resultMap="FlowableExpressionResult">
        <include refid="selectFlowableExpressionVo"/>
        <where>
            <if test="name != null  and name != ''">and name like concat('%', #{name}, '%')</if>
            <if test="expression != null  and expression != ''">and expression = #{expression}</if>
            <if test="dataType != null  and dataType != ''">and data_type = #{dataType}</if>
            <if test="status != null ">and status = #{status}</if>
        </where>
    </select>

    <select id="selectFlowableExpressionById" parameterType="String" resultMap="FlowableExpressionResult">
        <include refid="selectFlowableExpressionVo"/>
        where id = #{id}
    </select>

    <insert id="insertFlowableExpression" parameterType="FlowableExpression">
        insert into t_flowable_expression
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null and id != ''">id,</if>
            <if test="name != null">name,</if>
            <if test="expression != null">expression,</if>
            <if test="dataType != null">data_type,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="createId != null">create_id,</if>
            <if test="updateId != null">update_id,</if>
            <if test="status != null">status,</if>
            <if test="remark != null">remark,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null and id != ''">#{id},</if>
            <if test="name != null">#{name},</if>
            <if test="expression != null">#{expression},</if>
            <if test="dataType != null">#{dataType},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="createId != null">#{createId},</if>
            <if test="updateId != null">#{updateId},</if>
            <if test="status != null">#{status},</if>
            <if test="remark != null">#{remark},</if>
        </trim>
    </insert>

    <update id="updateFlowableExpression" parameterType="FlowableExpression">
        update t_flowable_expression
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null">name = #{name},</if>
            <if test="expression != null">expression = #{expression},</if>
            <if test="dataType != null">data_type = #{dataType},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="createId != null">create_id = #{createId},</if>
            <if test="updateId != null">update_id = #{updateId},</if>
            <if test="status != null">status = #{status},</if>
            <if test="remark != null">remark = #{remark},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteFlowableExpressionById" parameterType="String">
        delete
        from t_flowable_expression
        where id = #{id}
    </delete>

    <delete id="deleteFlowableExpressionByIds" parameterType="String">
        delete from t_flowable_expression where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>